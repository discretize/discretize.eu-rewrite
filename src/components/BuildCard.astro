---
import { Icon } from "astro-icon";
import Profession from "./gw2-ui/Profession.astro";
import { getOptimizedImage } from "./images";
import Tooltip from "./Tooltip.astro";

export interface BuildCardProps {
  title: string;
  role: string;
  date: string;
  profession: string;
  specialization: string;
  cmGuide: boolean;
  uptodate: boolean;
  rating: number;
  slug: string;
  archive: boolean;
}

const UPDATED_LAST_X_DAYS = 30;
const {
  title,
  specialization,
  profession,
  slug,
  date,
  cmGuide,
  role,
  rating,
  uptodate = { guide: true, gear: true },
} = Astro.props;

const pcM = `var(--gw2-color-${profession.toLowerCase()}-main)`;
const pcL = `var(--gw2-color-${profession.toLowerCase()}-light)`;

const image = await getOptimizedImage(specialization.toLowerCase());
---

<a
  href={`/builds/${slug}`}
  class={`mb-4 block ${rating === "archive" ? "hidden" : ""}`}
  data-rating={rating.toLowerCase().replace(" ", "")}
>
  <article class="outer rounded-3xl flex items-center embossed">
    <img
      src={image.src}
      width={100}
      height={100}
      alt={specialization}
      class="image"
    />
    <div class="text-2xl">
      <Profession
        name={specialization}
        disableLink
        className="spec"
        text={title}
      />
      <!-- {
        // if this build was updated in the last 7 days, show a new tag
        new Date(date).getTime() >
        new Date().getTime() - UPDATED_LAST_X_DAYS * 24 * 60 * 60 * 1000 ? (
          <span class="badge">Updated</span>
        ) : undefined
      } -->
    </div>

    <div class="infoButtons">
      <div class="text-xs">
        <Tooltip>
          <span slot="target">
            <Icon
              name="mdi:clock-outline"
              height="1.8rem"
              class={`${
                uptodate.guide && uptodate.gear
                  ? "text-green-500"
                  : uptodate.guide || uptodate.gear
                  ? "yellow"
                  : "red"
              }`}
            />
          </span>
          <div slot="tooltip">
            Gear: {uptodate.gear ? "up-to-date" : "not updated"}<br />
            Guide: {uptodate.guide ? "up-to-date" : "not updated"}
          </div>
        </Tooltip>
      </div>

      {
        cmGuide && (
          <>
            <Tooltip>
              <div class="text-blue-500" slot="target">
                <Icon name="mdi:book-open" height="1.8rem" />
              </div>
              <span slot="tooltip">CM-Guide available</span>
            </Tooltip>
          </>
        )
      }
    </div>

    <div class="justify-end flex max-lg:hidden gap-2">
      {
        [rating, role].map((tag) => {
          return (
            <div
              class={`chip border rounded-lg tertiary-border on-surface small cursor-default px-2 border-${profession.toLowerCase()}-main`}
            >
              <span>{tag}</span>
            </div>
          );
        })
      }
    </div>
  </article>
</a>

<style define:vars={{ pcM, pcL }}>
  .outer {
    height: 110px;
    padding: 0 2rem;
    width: 100%;
    border: 1px solid var(--pcM);
    display: grid;
    grid-template-columns: 1fr 2fr 80px 2fr;
  }
  .outer:hover {
    border: 1px solid var(--pcL);
  }

  .infoButtons {
    display: flex;
    gap: 0.5rem;
    align-self: center;
  }

  .chip {
    font-size: 0.6rem;
  }

  @media (max-width: 1000px) {
    .outer {
      grid-template-columns: 1fr 2fr 80px;
    }
  }
  @media (max-width: 500px) {
    .outer {
      padding: 0 0.5rem;
    }
    .title {
      font-size: 1.1rem;
    }
  }

  @media (max-width: 900px) {
    .lastUpdated {
      position: relative;
      left: 0;
    }
    .title {
      margin-left: 0 !important;
    }
    .tags {
      position: relative;
      left: 0;
    }
  }
</style>
