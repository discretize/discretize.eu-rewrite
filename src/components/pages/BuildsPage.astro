---
import Profession from "src/components/gw2-ui/Profession.astro";
import Layout, { SEOProps } from "src/layouts/Layout.astro";
import "@gw2-ui/default_style.css";
import "@discretize/typeface-menomonia";
import BuildCard, { BuildCardProps } from "src/components/BuildCard.astro";
import TextDivider from "src/components/TextDivider.astro";
import Label from "src/components/Label.astro";
import type { ProfessionTypes } from "@gw2-ui/data/professions";
import { Icon } from "astro-icon";
import Tooltip from "../Tooltip.astro";

interface Props {
  professions: ProfessionTypes[];
}

const PROFESSIONS = Astro.props.professions.map((profession) => ({
  profession,
  builds: [],
}));

const buildsRaw = await Astro.glob(
  `../../../discretize-guides/builds/**/index.mdx`
);
const builds: BuildCardProps[] = buildsRaw.map((build) => ({
  title: build.frontmatter.title,
  role: build.frontmatter.role,
  date: build.frontmatter.date,
  profession: build.frontmatter.profession,
  specialization: build.frontmatter.specialization,
  cmGuide: build.frontmatter.cmGuide,
  uptodate: build.frontmatter.uptodate,
  rating: build.frontmatter.rating,
  archive: build.frontmatter.archive,
  slug: build.file
    .split("discretize-guides/builds/")[1]
    .replace("/index.mdx", ""),
}));
builds.forEach((build) => {
  const profession = PROFESSIONS.find(
    ({ profession }) => profession === build.profession
  );
  if (profession) {
    profession.builds.push(build);
  }
});

const seo: SEOProps = {
  title: "Builds",
};

const SELECTED = [
  "hover:bg-blue-700",
  "dark:hover:bg-blue-300",
  "bg-blue-500",
  "dark:bg-blue-500",
  "text-black",
];
const UNSELECTED = ["embossed", "dark:hover:bg-gray-700", "hover:bg-gray-200"];

const SHARED =
  "px-4 py-2 text-sm w-full h-full font-medium border-gray-600 focus:ring-0";
---

<Layout seo={seo} disableBackground>
  <div class="max-w-[1000px] m-auto md:mt-4">
    <div class="flex rounded-md shadow-sm h-[46px]" role="group">
      <Tooltip className="flex-auto">
        <button
          slot="target"
          type="button"
          class={`${SHARED} border rounded-l-lg ${SELECTED.join(" ")}`}
          id="button-current"
          aria-label="Current Builds"
        >
          <span>Current</span>
        </button>
        <div slot="tooltip">Viable builds for the current patch</div>
      </Tooltip>
      <Tooltip className="flex-auto">
        <button
          slot="target"
          type="button"
          class={`${SHARED} border-t border-b ${UNSELECTED.join(" ")}`}
          id="button-dtlfg"
          aria-label="Discretize LFG Builds"
        >
          <span class="whitespace-nowrap"
            >[dT] LFG <Icon
              name="mdi:information"
              height="1rem"
              class="inline"
            /></span
          >
        </button>
        <div slot="tooltip">Builds used by the Discretize Guild</div>
      </Tooltip>
      <Tooltip className="flex-auto">
        <button
          slot="target"
          type="button"
          class={`${SHARED} border rounded-r-md" ${UNSELECTED.join(" ")}`}
          id="button-archived"
          aria-label="Archived Builds"
        >
          <span>Archive</span>
        </button>
        <div slot="tooltip" class="tooltip up">
          Not updated, potentially outdated builds
        </div>
      </Tooltip>
    </div>

    {
      PROFESSIONS.map(({ profession, builds }) => (
        <>
          <div class="mt-4 text-xl">
            <TextDivider>
              <Label className="p-3">
                <Profession name={profession} disableLink />
              </Label>
            </TextDivider>
            {builds.map((build) => (
              <BuildCard {...build} />
            ))}
          </div>
        </>
      ))
    }
  </div>
</Layout>

<script define:vars={{ SELECTED, UNSELECTED }}>
  const dT_LFG_Builds = document.querySelectorAll(
    "a[data-rating='discretizelfg']"
  );
  console.log(dT_LFG_Builds);
  const allBuilds = document.querySelectorAll("a[data-rating]");
  const archivedBuilds = document.querySelectorAll("a[data-rating='archive']");
  const buildsSections = document.querySelectorAll(".builds");
  const allButtons = [];

  function highlightButton(id) {
    const button = document.querySelector(`[id='${id}']`);
    button.classList.remove(...UNSELECTED);
    button.classList.add(...SELECTED);
    // unhighlight the other buttons
    allButtons.forEach((button) => {
      if (button.id !== id) {
        button.classList.remove(...SELECTED);
        button.classList.add(...UNSELECTED);
      }
    });
  }

  function removeEmptySections() {
    buildsSections.forEach((build) => {
      build.style.display = "block";
    });
    // check if categories .builds are empty and hide if they are
    buildsSections.forEach((build) => {
      // count children that are visible
      const visibleChildren = Array.from(build.children).filter((child) => {
        return child.style.display !== "none";
      });
      if (visibleChildren.length === 1) {
        build.style.display = "none";
      }
    });
  }

  function hideAllBuilds() {
    allBuilds.forEach((builds) => {
      builds.style.display = "none";
    });
  }

  function showDiscretizeLFGBuilds() {
    hideAllBuilds();
    dT_LFG_Builds.forEach((dT_LFG_Build) => {
      // show the build by accessign styles
      dT_LFG_Build.style.display = "block";
    });

    removeEmptySections();
    highlightButton("button-dtlfg");
  }

  function showCurrentBuilds() {
    allBuilds.forEach((builds) => {
      builds.style.display = "block";
    });
    archivedBuilds.forEach((archivedBuild) => {
      // hide the build by accessign styles
      archivedBuild.style.display = "none";
    });
    removeEmptySections();
    highlightButton("button-current");
  }

  function showArchivedBuilds() {
    hideAllBuilds();
    archivedBuilds.forEach((archivedBuild) => {
      // show the build by accessign styles
      archivedBuild.style.display = "block";
    });
    removeEmptySections();
    highlightButton("button-archived");
  }

  function attachListeners() {
    const dT_LFG_Button = document.querySelector("[id='button-dtlfg']");
    dT_LFG_Button.addEventListener("click", showDiscretizeLFGBuilds);

    const currentBuildsButton = document.querySelector("[id='button-current']");
    currentBuildsButton.addEventListener("click", showCurrentBuilds);

    const archivedBuildsButton = document.querySelector(
      "[id='button-archived']"
    );
    archivedBuildsButton.addEventListener("click", showArchivedBuilds);
    allButtons.push(dT_LFG_Button, currentBuildsButton, archivedBuildsButton);
  }
  // attach listeners on page load
  attachListeners();
</script>
